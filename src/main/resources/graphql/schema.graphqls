enum SensorType {
    TEMPERATURE,
    HUMIDITY,
    AIR_POLLUTION,
}

input GeolocationInput {
    latitude: String!
    longitude: String!
}

type HttpResponseDTO {
    statusCode: Int!
    responseBody: String!
}

input SensorInput {
    sensorContractAddress: String!
    dataStreamEntityContractAddress: String!
    sensorType: SensorType!
    geolocation: GeolocationInput!
}

type Sensor {
    sensorContractAddress: ID!,
}

type SensorSummaryDTO {
    sensorContractAddress: String!,
    streamSize: Int!
}

type ResponseRecord {
    key: String!
    value: String!
    offset: Int!
}

type ResponseMessagesDTO {
    records: [ResponseRecord]
}

type Query {
    getAllSensors(count: Int): [Sensor]!
    getSensorByContractAddress(sensorAccountContractAddress: ID): Sensor
    getSensorSummary(sensorContractAddress: String!): SensorSummaryDTO
    getMessagesForSensor(sensorContractAddress: String!, offset: Int!, count: Int!):ResponseMessagesDTO
}


input Record {
    key: String!
    value: String!
}

input NewMessagesDTO {
    records: [Record]
}

type Mutation {
    registerSensor(
        sensorContractAddress: String!
    ):HttpResponseDTO
    sendMessages(
        sensorContractAddress: String!
        newMessagesDTO: NewMessagesDTO
    ):HttpResponseDTO
}